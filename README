ABOUT:

Math-Based Optimization Language (MBOL) is a programming language for optimization problems which aims to be identical to the high-level math-based representation of the optimization program. This repository includes a compiler that converts latex source of an optimization problem into C++ code which can be compiled and executed with the popular optimizer, CPLEX.

This tool was initially created by me (Andrew Newell) to quickly specify optimization programs to run on CPLEX. I've found this tool to be exteremely useful in my research at Purdue University, and I wanted to share the tool with others.


AUTHOR:

Andrew Newell is currently the only author. You can send me comments or suggestions at andyjnewell@gmail.com. Also, if you are interesting in also becoming an author of this project let me know.


DEPENDENCIES:

g++ is necessary to compile mbolc (MBOL compiler). The compiler uses lex and yacc, so if you want to modify the compiler you will need lex and yacc. You will need COIN-OR symphony (open-source) or CPLEX (free academic license) to solve the created optimization program.

The tool pdflatex is highly recommended as the most important advantage of using MBOL is that the MBOL source is compilable by pdflatex into publishable typesetted mathematics.


GETTING STARTED, CPLEX USERS:

CPLEX_HOME should be set to the home directory of CPLEX, e.g.:
export EXPORT_HOME=~/ILOG/CPLEX/

Use the -cpx argument with mbolc for CPLEX


GETTING STARTED, COIN-OR USERS:

Install COIN-OR Symphony, here is the command for Ubuntu users:
sudo apt-get install coinor-libsymphony0

mbolc by default uses symphony


GETTING STARTED, ALL USERS AFTER SETTING UP SOLVER:

To compile mbolc as well as the samples just call make:
make

The binary mbolc is created in the bin directory, you may optionally decide to install it if you have root privilages:
sudo make install

To observe what mbolc is doing, you look at the samples consisting mostly of graph theory and SVM optimizations:
cd samples
make
./main
make svm


USING MBOLC:

The initial step is always to write an optimization problem in MBOL which is simply a subset of latex using the mbol latex environment (many examples shown in samples/mbol-source). Then, you have choices what to do with this MBOL source that describes an optimization program. First, with the mbolc's -pdf flag you can produce the nice typesetted latex output. Second, with mbolc's -hpp flag you can produce c++ code that invokes CPLEX to solve the optimization program, and this c++ code can be integrated into your own project. Finally, with mbolc's -bin flag you can produce a binary that invokes CPLEX to solve the optimization program while using files as I/O.


ADVANCED:

To enable proper equation highlighting with the mbol environment for the source .tex files, I was able to edit /usr/share/vim/vim73/syntax/tex.vim and add to the end of "Standard Math Zones" an entry for "mbol" that is similar to the one for "equation". The location of this file may be slightly different on other systems. This method does require root.
